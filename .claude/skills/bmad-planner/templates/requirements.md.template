# Requirements: {{TITLE}}

**Date:** {{DATE}}
**Author:** {{GH_USER}}
**Status:** Draft

## Business Context

### Problem Statement

[What problem does this solve? Why is this feature needed?]

### Success Criteria

- [ ] Criterion 1: [Measurable outcome]
- [ ] Criterion 2: [Measurable outcome]
- [ ] Criterion 3: [Measurable outcome]

### Stakeholders

- **Primary:** [Who is this for? Who will use this feature?]
- **Secondary:** [Who else is impacted? Other teams, systems, users?]

## Functional Requirements

### FR-001: [Requirement Name]

**Priority:** High | Medium | Low
**Description:** [Detailed description of what the system must do]

**Acceptance Criteria:**
- [ ] AC 1: [Specific, testable criterion]
- [ ] AC 2: [Specific, testable criterion]
- [ ] AC 3: [Specific, testable criterion]

### FR-002: [Requirement Name]

**Priority:** High | Medium | Low
**Description:** [Detailed description]

**Acceptance Criteria:**
- [ ] AC 1: [Specific, testable criterion]
- [ ] AC 2: [Specific, testable criterion]

## Non-Functional Requirements

### Performance

- Response time: [e.g., < 200ms for 95th percentile]
- Throughput: [e.g., 1000 requests/second]
- Concurrency: [e.g., 100 simultaneous users]

### Security

- Authentication: [e.g., JWT tokens, OAuth 2.0]
- Authorization: [e.g., Role-based access control]
- Data encryption: [e.g., At rest and in transit]
- Input validation: [e.g., JSON schema validation]

### Scalability

- Horizontal scaling: [Yes/No, explain approach]
- Database sharding: [Required? Strategy?]
- Cache strategy: [e.g., Redis for session data]

### Reliability

- Uptime target: [e.g., 99.9%]
- Error handling: [Strategy for failures]
- Data backup: [Frequency, retention]

### Maintainability

- Code coverage: [e.g., â‰¥80%]
- Documentation: [API docs, architecture docs]
- Testing: [Unit, integration, e2e strategies]

## Constraints

### Technology

- Programming language: Python 3.11+
- Package manager: uv
- Framework: [e.g., FastAPI, Flask, Django]
- Database: [e.g., SQLite, PostgreSQL]
- Container: Podman

### Budget

[Any cost constraints or considerations]

### Timeline

- Target completion: [Date or duration]
- Milestones: [Key dates]

### Dependencies

- External systems: [APIs, services this depends on]
- Internal systems: [Other features, modules]
- Third-party libraries: [Key dependencies]

## Out of Scope

[Explicitly state what this feature will NOT include. This prevents scope creep.]

- [Feature or capability NOT in scope]
- [Future enhancement to consider later]
- [Related but separate concern]

## Risks and Mitigation

| Risk | Probability | Impact | Mitigation Strategy |
|------|------------|--------|---------------------|
| [Risk description] | High/Med/Low | High/Med/Low | [How to prevent or handle] |
| [Risk description] | High/Med/Low | High/Med/Low | [How to prevent or handle] |

## Data Requirements

### Data Entities

[Describe the main data entities this feature will work with]

### Data Volume

[Expected data size, growth rate]

### Data Retention

[How long to keep data, archive strategy]

## User Stories

### As a [user type], I want [goal] so that [benefit]

**Scenario 1:** [Happy path]
- Given [context]
- When [action]
- Then [expected result]

**Scenario 2:** [Alternative path]
- Given [context]
- When [action]
- Then [expected result]

**Scenario 3:** [Error condition]
- Given [context]
- When [action]
- Then [expected error handling]

## Assumptions

[List any assumptions being made about users, systems, or environment]

- Assumption 1: [e.g., Users have modern browsers]
- Assumption 2: [e.g., Network connectivity is reliable]
- Assumption 3: [e.g., Input data follows expected format]

## Questions and Open Issues

- [ ] Question 1: [Unresolved question requiring input]
- [ ] Question 2: [Decision needed before implementation]

## Approval

- [ ] Product Owner review
- [ ] Technical Lead review
- [ ] Security review (if applicable)
- [ ] Ready for implementation
